#!/usr/bin/env node

const app = require('../index');
const debug = require('debug')('express-nodejs:server');
const http = require('http');
const mongoose = require('mongoose');
const ws = require('socket.io'); //引入socket.io
const global = require('../public/javascripts/global.js');
const config = require('../config.json');

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || config.port);
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

//http服务与ws服务相关联, 返回io服务实例 
let io = ws(server).of("/news");

//监听用户的连接事件
io.on('connection', function (socket) {
  //发生在用户连接io服务器时
  console.log('socket shell connection successful! Service listening on ' + config.port + ' port.');
  // //消息发送事件
  // socket.on('message', function (obj) {
  // });
  global.io = io;
});

/**
 * Listen on provided port, on all network interfaces.
 */
if (config.process) {
  mongoose.connect(`mongodb://${config.database.ip}:${config.database.port}/SimpleDesign`, { useNewUrlParser: true, useUnifiedTopology: true }, err => {
    if (err) {
      console.log('Connection Error:' + err);
    } else {
      console.log('数据库连接成功!');
    }
  });
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
} else {
  console.error("Failed to open the service. Please try again！");
  server.close() // 关闭服务
}
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : '服务端口 ' + addr.port;
  console.log(bind + " 已起用，服务开启成功！");
  debug(bind + " 已起用，服务开启成功！");
};
